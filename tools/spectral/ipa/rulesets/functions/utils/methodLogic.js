import { isResourceCollectionIdentifier, isSingletonResource } from './resourceEvaluation';
import { isPathParam } from './resourceEvaluation';

/**
 * Checks whether the get method at a given path is valid
 *
 * @param resourcePath the resource path to inspect
 * @param resourcePaths the resource paths generated by getResourcePathItems
 * @returns true if the resourcePath has an invalid list method, false otherwise
 */
export function invalidGetMethod(resourcePath, resourcePaths) {
  return (
    !lastIdentifierIsPathParam(resourcePath) &&
    !(isResourceCollectionIdentifier(resourcePath) && isSingletonResource(resourcePaths))
  );
}

/**
 * Checks whether the list method at a given path is valid
 *
 * @param resourcePath the resource path to inspect
 * @param resourcePaths the resource paths generated by getResourcePathItems
 * @returns true if the resourcePath has an invalid list method, false otherwise
 */
export function invalidListMethod(resourcePath, resourcePaths) {
  return lastIdentifierIsPathParam(resourcePath) || isSingletonResource(resourcePaths);
}

function lastIdentifierIsPathParam(resourceIdentifier) {
  if (resourceIdentifier.includes('.')) {
    resourceIdentifier = resourceIdentifier.substring(0, resourceIdentifier.lastIndexOf('.'));
  }
  return isPathParam(resourceIdentifier.split('/').pop());
}
