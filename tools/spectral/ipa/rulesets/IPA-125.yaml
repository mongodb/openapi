# IPA-125: Single Type in Request and Response
# http://go/ipa/125

functions:
  - IPA125OneOfMustHaveDiscriminator
  - IPA125OneOfNoBaseTypes

rules:
  xgen-IPA-125-oneOf-must-have-discriminator:
    description: |
      Each oneOf property must include a discriminator property to define the exact type.

      ##### Implementation details
      Rule checks for the following conditions:
        - Applies only to schemas with `oneOf` containing references
        - Ensures a `discriminator` property is present with a valid `propertyName`
        - Validates that `discriminator.mapping` contains exactly the same number of entries as `oneOf` references
        - Validates that each `discriminator.mapping` value matches a reference in the `oneOf` array
        - Ignores `oneOf` definitions with inline schemas

      ##### Matching Logic
      - The `discriminator.mapping` must have the same number of entries as there are references in the `oneOf` array
      - Each value in the `discriminator.mapping` must match one of the `$ref` values in the `oneOf` array
      - Each `$ref` in the `oneOf` array must have a corresponding entry in the `discriminator.mapping`
      - Example:
        ```yaml
        oneOf:
          - $ref: '#/components/schemas/Dog'
          - $ref: '#/components/schemas/Cat'
        discriminator:
          propertyName: type
          mapping:
            dog: '#/components/schemas/Dog'
            cat: '#/components/schemas/Cat'
        ```
        This is valid because there are exactly 2 mappings for 2 oneOf references, and all values match.

    message: '{{error}} https://mdb.link/mongodb-atlas-openapi-validation#xgen-IPA-125-oneOf-must-have-discriminator'
    severity: warn
    given: '$.components.schemas[*]'
    then:
      function: 'IPA125OneOfMustHaveDiscriminator'

  xgen-IPA-125-oneOf-no-base-types:
    description: |
      API producers should not use oneOf with different base types like integer, string, boolean, or number or references at the same time.

      ##### Implementation details
      Rule checks for the following conditions:
        - Applies to schemas with `oneOf` arrays
        - Ensures no mixing of base types with references
        - Ensures no multiple different base types in the same oneOf
        - Base types considered are: integer, string, boolean, number
        - Using the same base type multiple times is allowed (e.g., multiple string enums)

      ##### Rationale
      Using oneOf with multiple primitive types can lead to ambiguity and validation problems. Clients may not 
      be able to properly determine which type to use in which context. Instead, use more specific 
      object types with clear discriminators.

    message: '{{error}} https://mdb.link/mongodb-atlas-openapi-validation#xgen-IPA-125-oneOf-no-base-types'
    severity: warn
    given: '$.components.schemas[*]'
    then:
      function: 'IPA125OneOfNoBaseTypes'
