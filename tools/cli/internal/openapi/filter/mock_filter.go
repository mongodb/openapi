// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/openapi/tools/cli/internal/openapi/filter (interfaces: Filter)
//
// Generated by this command:
//
//	mockgen -destination=../filter/mock_filter.go -package=filter github.com/mongodb/openapi/tools/cli/internal/openapi/filter Filter
//

// Package filter is a generated GoMock package.
package filter

import (
	reflect "reflect"

	openapi3 "github.com/getkin/kin-openapi/openapi3"
	gomock "go.uber.org/mock/gomock"
)

// MockFilter is a mock of Filter interface.
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
}

// MockFilterMockRecorder is the mock recorder for MockFilter.
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance.
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockFilter) Apply(arg0 *openapi3.T, arg1 *Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockFilterMockRecorder) Apply(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockFilter)(nil).Apply), arg0, arg1)
}
