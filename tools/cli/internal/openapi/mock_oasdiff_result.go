// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/openapi/tools/cli/internal/openapi (interfaces: DiffGetter)
//
// Generated by this command:
//
//	mockgen -destination=../openapi/mock_oasdiff_result.go -package=openapi github.com/mongodb/openapi/tools/cli/internal/openapi DiffGetter
//

// Package openapi is a generated GoMock package.
package openapi

import (
	reflect "reflect"

	openapi3 "github.com/getkin/kin-openapi/openapi3"
	diff "github.com/tufin/oasdiff/diff"
	load "github.com/tufin/oasdiff/load"
	gomock "go.uber.org/mock/gomock"
)

// MockDiffGetter is a mock of DiffGetter interface.
type MockDiffGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDiffGetterMockRecorder
}

// MockDiffGetterMockRecorder is the mock recorder for MockDiffGetter.
type MockDiffGetterMockRecorder struct {
	mock *MockDiffGetter
}

// NewMockDiffGetter creates a new mock instance.
func NewMockDiffGetter(ctrl *gomock.Controller) *MockDiffGetter {
	mock := &MockDiffGetter{ctrl: ctrl}
	mock.recorder = &MockDiffGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiffGetter) EXPECT() *MockDiffGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDiffGetter) Get(arg0 *diff.Config, arg1, arg2 *openapi3.T) (*diff.Diff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*diff.Diff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDiffGetterMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDiffGetter)(nil).Get), arg0, arg1, arg2)
}

// GetWithOperationsSourcesMap mocks base method.
func (m *MockDiffGetter) GetWithOperationsSourcesMap(arg0 *diff.Config, arg1, arg2 *load.SpecInfo) (*diff.Diff, *diff.OperationsSourcesMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithOperationsSourcesMap", arg0, arg1, arg2)
	ret0, _ := ret[0].(*diff.Diff)
	ret1, _ := ret[1].(*diff.OperationsSourcesMap)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithOperationsSourcesMap indicates an expected call of GetWithOperationsSourcesMap.
func (mr *MockDiffGetterMockRecorder) GetWithOperationsSourcesMap(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithOperationsSourcesMap", reflect.TypeOf((*MockDiffGetter)(nil).GetWithOperationsSourcesMap), arg0, arg1, arg2)
}
