name: 'Optional Spec Validations'
on:
  workflow_call:
    inputs:
      spectral_version:
        description: 'Version of Spectral to use'     
        type: string
        required: true
      env:
        description: 'Environment to generate the OpenAPI Spec for.'
        required: true
        type: string
    secrets: # all secrets are passed explicitly in this workflow
      api_bot_pat:
        required: true
      jira_api_token:
        required: true


permissions:
  contents: write
  issues: write
  id-token: write

jobs:
  optional-validations:
    runs-on: ubuntu-latest
    outputs:
      postman-validation-failed: ${{ steps.set-outputs.outputs.postman-validation-failed }}
      ipa-validation-failed: ${{ steps.set-outputs.outputs.ipa-validation-failed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Checkout .github folder from main branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          ref: main
          sparse-checkout: |
            .github/workflows
      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install npm dependencies
        run: npm install
      - name: Download openapi-foas
        uses: actions/download-artifact@v5
        with:
          name: openapi-foas-${{ inputs.env }}
          github-token: ${{ secrets.api_bot_pat }}
          run-id: ${{ github.run_id }}
      - name: Run IPA validation
        id: ipa-spectral-validation
        run: |
          npx spectral lint openapi-foas.json --ruleset=./tools/spectral/ipa/ipa-spectral.yaml
      - name: Validate the FOAS can be used to generate Postman collection
        id: spectral-validation
        env:
          SPECTRAL_VERSION: ${{ inputs.spectral_version }}
        run: |
          cp -rf "openapi-foas.json" "./tools/postman/openapi/atlas-api.json"
          pushd tools/postman
          make convert_to_collection
          npx -- @stoplight/spectral-cli@"${SPECTRAL_VERSION}" lint ./tmp/collection.json --ruleset=./validation/spectral.yaml
          popd
      - name: Set outputs for error handling
        id: set-outputs
        if: always()
        run: |
          echo "postman-validation-failed=${{ steps.spectral-validation.outcome == 'failure' }}" >> $GITHUB_OUTPUT
          echo "ipa-validation-failed=${{ steps.ipa-spectral-validation.outcome == 'failure' }}" >> $GITHUB_OUTPUT

  postman-validation-error-handler:
    name: Handle Postman Validation Error
    needs: optional-validations
    if: ${{ always() && needs.optional-validations.outputs.postman-validation-failed == 'true' }}
    uses: ./.github/workflows/task-failure-handler.yml
    with:
      env: ${{ inputs.env }}
      task_name: 'Optional Postman validation'
      team_id: ${{ vars.JIRA_TEAM_ID_APIX_PLATFORM }}
    secrets:
      jira_api_token: ${{ secrets.jira_api_token }}

  ipa-validation-error-handler:
    name: Handle IPA Validation Error  
    needs: optional-validations
    if: ${{ always() && needs.optional-validations.outputs.ipa-validation-failed == 'true' }}
    uses: ./.github/workflows/task-failure-handler.yml
    with:
      env: ${{ inputs.env }}
      task_name: 'Optional IPA validation'
      team_id: ${{ vars.JIRA_TEAM_ID_APIX_PLATFORM }}
    secrets:
      jira_api_token: ${{ secrets.jira_api_token }}

