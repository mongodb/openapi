name: 'FOASCLI New Release'
run-name: 'Release ${{ inputs.version_number }} (skip tests: ${{ inputs.skip_tests }}, use existing tag: ${{ inputs.use_existing_tag}})'

# Used for creating a new release. This workflow will run qa acceptance tests, create a new tag, and generate the release with GoReleaser.
on:
  workflow_dispatch:
    inputs:
      version_number:
        description: 'Version number (e.g., v1.0.0, v1.0.0-pre, v1.0.0-pre1)'
        required: true
      skip_tests:
        description: 'Set value to `true` to skip tests, default is `false`'
        default: 'false'
      use_existing_tag:
        description: 'Set value to `true` to use an existing tag for the release process, default is `false`'
        default: 'false'

jobs:
  create-tag:
    runs-on: ubuntu-latest
    if: >-
      !cancelled()
      && inputs.use_existing_tag == 'false'
    steps:
      - name: Validation of version format
        run: |
          echo "${{ inputs.version_number }}" | grep -P '^v\d+\.\d+\.\d+(-pre[A-Za-z0-9-]*)?$'
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - name: Get the latest commit SHA
        id: get-sha
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      - name: Create release tag
        uses: rickstaa/action-create-tag@a1c7777fcb2fee4f19b0f283ba888afa11678b72
        with:
          tag: ${{ inputs.version_number }}
          commit_sha: ${{ steps.get-sha.outputs.sha }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.PASSPHRASE }}

  run-tests:
    needs: [ create-tag ]
    if: >-
      !cancelled()
      && !contains(needs.*.result, 'failure')
      && inputs.skip_tests == 'false'
    secrets: inherit
    uses: ./.github/workflows/code-health-tools.yml

  release:
    runs-on: ubuntu-latest
    needs: [ run-tests ]
    # Release is skipped if there are failures in previous steps
    if: >-
      !cancelled()
      && !contains(needs.*.result, 'failure')
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.version_number }}
      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'tools/cli/go.mod'
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@286f3b13b1b49da4ac219696163fb8c1c93e1200
        with:
          version: '~> v2'
          workdir: tools/cli
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify: 
    runs-on: ubuntu-latest
    needs: [ release ]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          token: ${{secrets.api_bot_pat}}
          sparse-checkout: |
            .github/ISSUE_TEMPLATE/GH_ACTION_ISSUE_TEMPLATE.md
            .github/scripts/create_jira_ticket.sh

      - name: Check if an issue already exists 
        id: check-issue
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_ENV: "prod"
          RELEASE_NAME: "FOASCLI"
          REPO: ${{ github.repository }}
        run: |
          query="(${TARGET_ENV}}) The ${RELEASE_NAME} Release has failed."
          number_issue=$(gh search issues "${query}" --repo "${REPO}" --state open --label failed-release --json title | jq length)
          
          echo "found-issue=false" >> "${GITHUB_OUTPUT}"
          if [ "${number_issue}" -gt 0 ]; then
            echo "An issue already exists. Stopping execution."
            echo "found-issue=true" >> "${GITHUB_OUTPUT}"
          fi
      - name: Create Issue # Create an issue in the repo if the release fails
        if: ${{ steps.check-issue.outputs.found-issue == 'false' }}
        id: create-issue
        uses: JasonEtco/create-an-issue@1b14a70e4d8dc185e5cc76d3bec9eab20257b2c5
        env:
          TARGET_ENV: "prod"
          RELEASE_NAME: "FOASCLI"
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          update_existing: false
        with:
          filename: .github/ISSUE_TEMPLATE/GH_ACTION_ISSUE_TEMPLATE.md
      - name: Create JIRA Ticket
        if: ${{ steps.create-issue.outputs.number != null }}
        id: create-jira-ticket
        env:
          TARGET_ENV: "prod"
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_ID: ${{ steps.create-issue.outputs.number }}
        run: .github/scripts/create_jira_ticket.sh
      - name: Add comment to GH Issue
        if: ${{ steps.create-issue.outputs.number != null }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JIRA_TICKET_ID: ${{ steps.create-jira-ticket.outputs.jira-ticket-id }}
          ISSUE_URL: ${{ steps.create-issue.outputs.url }}
        run: |
          gh issue comment ${{ env.ISSUE_URL }} -b "The ticket [${{env.JIRA_TICKET_ID}}](https://jira.mongodb.org/browse/${{env.JIRA_TICKET_ID}}) was created for internal tracking."

